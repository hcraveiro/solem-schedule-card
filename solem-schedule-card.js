(()=>{class t{constructor(t){this.element=t,this.selectedElement=t.querySelector(".dropdown-selected"),this.optionsElement=t.querySelector(".dropdown-options"),this.options=Array.from(this.optionsElement.querySelectorAll(".dropdown-option")),this.selectedElement.addEventListener("click",(()=>{this.toggleDropdown()})),this.options.forEach((t=>{t.addEventListener("click",(()=>{this.selectOption(t)}))}))}toggleDropdown(){this.element.classList.toggle("open")}selectOption(t){const n=t.getAttribute("data-value");this.selectedElement.querySelector("span").textContent=t.textContent,this.toggleDropdown(),this.currentMonth=parseInt(n);const e=new CustomEvent("monthChanged",{detail:{month:this.currentMonth},bubbles:!0,composed:!0});this.element.dispatchEvent(e)}}class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.currentMonth=(new Date).getMonth(),this.scheduleData=null,this._hass=null}connectedCallback(){this.addEventListener("monthChanged",this.changeMonthFromDropdown)}disconnectedCallback(){this.removeEventListener("monthChanged",this.changeMonthFromDropdown)}setConfig(t){if(!t.sensor)throw new Error("You need to define a sensor in config.");this.sensor=t.sensor,this.mac_address=this.extractMacAddress(this.sensor),this.mac_address?this._hass&&!this.scheduleData?this.fetchSensorData():this.addEventListener("hass-connected",(()=>this.fetchSensorData())):console.error("Not possible to extract MAC Address from the sensor:",this.sensor)}extractMacAddress(t){const n=t.match(/^sensor\.([0-9a-fA-F]{2}_[0-9a-fA-F]{2}_[0-9a-fA-F]{2}_[0-9a-fA-F]{2}_[0-9a-fA-F]{2}_[0-9a-fA-F]{2})_/);return n?n[1]:null}set hass(t){this._hass=t,this.scheduleData||this.fetchSensorData()}async fetchSensorData(){if(!this._hass||this.scheduleData)return;const t=this._hass.states[this.sensor];if(t&&t.attributes&&t.attributes.schedule){const n=t.attributes.schedule;n&&(this.scheduleData||(this.scheduleData=JSON.parse(JSON.stringify(n))))}this.render()}handleMonthChange(){this.shadowRoot.querySelector(".card").classList.add("hidden"),setTimeout((()=>{this.render();const t=this.shadowRoot.querySelector(".card");t.classList.add("hidden"),setTimeout((()=>{t.classList.remove("hidden")}),25)}),200)}changeMonth(t){this.currentMonth=(this.currentMonth+t+12)%12,this.handleMonthChange()}changeMonthFromDropdown(t){this.currentMonth=t.detail.month,this.handleMonthChange()}updateIntervalDays(t){const n=this.scheduleData[this.currentMonth]||{hours:[],stations:{},interval_days:0};this.scheduleData={...this.scheduleData,[this.currentMonth]:{...n,interval_days:parseInt(t.target.value)||0}},this.render()}addTimeSlot(){this.scheduleData[this.currentMonth]||{hours:[],stations:{},interval_days:0}||(this.scheduleData[this.currentMonth]={hours:[],stations:{},interval_days:0}),this.scheduleData[this.currentMonth].hours||(this.scheduleData[this.currentMonth].hours=[]),this.scheduleData[this.currentMonth].hours.push("07:00:00"),this.render()}updateTimeSlot(t,n){const e=this.scheduleData[this.currentMonth]||{hours:[],stations:{},interval_days:0};e&&e.hours&&(e.hours[t]=n.target.value,this.render())}removeTimeSlot(t){const n=this.scheduleData[this.currentMonth]||{hours:[],stations:{},interval_days:0};n&&n.hours&&n.hours.length>t&&(n.hours.splice(t,1),this.render())}updateStationTime(t,n){const e=this.scheduleData[this.currentMonth]||{hours:[],stations:{},interval_days:0};this.scheduleData={...this.scheduleData,[this.currentMonth]:{...e,stations:{...e.stations,[t]:parseInt(n.target.value)||0}}},this.render()}saveSchedule(){const t=Object.keys(this.scheduleData).sort(((t,n)=>t-n)).map((t=>this.scheduleData[t])),n=`set_irrigation_schedule_${this.mac_address}`;this._hass.callService("solem_bluetooth_watering_controller",n,{schedule:t}),this.showSaveNotification()}showSaveNotification(){const t=document.createElement("div");t.textContent="Schedule saved successfully!",t.style.position="fixed",t.style.top="20px",t.style.left="50%",t.style.transform="translateX(-50%)",t.style.backgroundColor="#28a745",t.style.color="#fff",t.style.padding="10px 20px",t.style.borderRadius="5px",t.style.fontSize="1em",t.style.boxShadow="0 4px 6px rgba(0, 0, 0, 0.2)",t.style.zIndex="1000",document.body.appendChild(t),setTimeout((()=>{t.remove()}),3e3)}findAllElementsRecursively(t,n){let e=[];return t?(t.shadowRoot&&e.push(...this.findAllElementsRecursively(t.shadowRoot,n)),(t instanceof Document||t instanceof ShadowRoot)&&e.push(...t.querySelectorAll(n)),t.childNodes.forEach((t=>{e.push(...this.findAllElementsRecursively(t,n))})),e):e}render(){if(!this.shadowRoot||!this.scheduleData)return;const n=this.scheduleData[this.currentMonth]||{hours:[],stations:{},interval_days:0};this.shadowRoot.innerHTML=`\n            <style>\n                @keyframes fadeInOut {\n                    0% {\n                        opacity: 0;\n                        visibility: hidden;\n                    }\n                    50% {\n                        opacity: 1;\n                        visibility: visible;\n                    }\n                    100% {\n                        opacity: 0;\n                        visibility: hidden;\n                    }\n                }\n                .card-transition {\n                    animation: fadeInOut 1s ease-in-out forwards;\n                }\n                /* Estilo do card */\n                .card {\n                    background-color: white;\n                    padding: 20px;\n                    border-radius: 12px;\n                    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1); /* Sombra suave */\n                    transition: box-shadow 0.3s ease; /* Somente a sombra irá transitar */\n                }\n                \n                /* Efeito de hover sem movimentação */\n                .card:hover {\n                    box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.15); /* A sombra aumenta ao passar o mouse */\n                }\n                \n                /* Efeito de foco no card */\n                .card:focus {\n                    outline: none;\n                    border: 2px solid #007BFF; /* Foco azul */\n                }\n                .card.hidden {\n                    opacity: 0;\n                }\n                .header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    font-size: 1.2em;\n                    font-weight: bold;\n                }\n                .month-selector button {\n                    background: none;\n                    border: none;\n                    font-size: 20px;\n                    cursor: pointer;\n                }\n                .month-selector select {\n                    font-size: 1em;\n                    padding: 5px;\n                    border-radius: 5px;\n                }\n                .schedule-list {\n                    margin-top: 10px;\n                }\n                .section {\n                    margin-top: 10px;\n                    padding: 10px;\n                    border-radius: 5px;\n                    background: #ffffff;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n                    padding: 10px;\n                }\n                .section h3 {\n                    margin: 0;\n                    font-size: 1.1em;\n                    font-weight: bold;\n                    color: #0073e6;\n                    border-bottom: 2px solid #0073e6;\n                    padding-bottom: 5px;\n                    margin-bottom: 8px;\n                }\n                .section input {\n                    width: 100%;\n                    padding: 5px;\n                    margin-top: 5px;\n                    font-size: 1em;\n                }\n                .buttons {\n                    display: flex;\n                    justify-content: space-between;\n                    margin-top: 10px;\n                }\n                .btn {\n                    background-color: #0073e6;\n                    color: white;\n                    border: none;\n                    padding: 10px;\n                    border-radius: 5px;\n                    cursor: pointer;\n                    font-size: 1em;\n                }\n                .btn-danger {\n                    background-color: #e60000;\n                }\n                .section div {\n                    display: flex;\n                    align-items: center;\n                    margin-bottom: 8px;\n                }\n                .section div span {\n                    margin-right: 10px; /* Espaço entre a label e o input */\n                    white-space: nowrap; /* Impede que o texto da label quebre para a linha seguinte */\n                }\n                .section div input {\n                    flex-grow: 1;\n                    margin-right: 10px; /* Espaço entre o input e o botão */\n                }\n                .section div button {\n                    margin-left: 10px; /* Espaço à esquerda do botão */\n                }\n            \n                /* Estilos específicos para os ícones de emojis */\n                .btn i, .btn span, .btn-danger i, .btn-danger span {\n                    color: transparent !important; /* Tornar a cor do emoji transparente */\n                    text-shadow: 0 0 0 white !important; /* Aplicar o texto em branco via sombra */\n                    font-size: inherit; /* Garantir que o tamanho do emoji seja o mesmo do botão */\n                }\n                /* Estilo do dropdown */\n                .custom-dropdown {\n                    position: relative;\n                    width: 200px;\n                    font-size: 14px;\n                    border-radius: 6px;\n                    background-color: #007BFF;\n                    color: white;\n                    cursor: pointer;\n                }\n                \n                /* Estilo do item selecionado */\n                .dropdown-selected {\n                    padding: 6px 10px;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                }\n            \n                /* Estilo da seta */\n                .dropdown-arrow {\n                    font-size: 14px;\n                }\n                \n                /* Estilo da lista de opções */\n                .dropdown-options {\n                    display: none; /* Esconde as opções por padrão */\n                    position: absolute;\n                    background-color: #007BFF;\n                    min-width: 160px;\n                    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);\n                    z-index: 1;\n                }\n                \n                /* Exibe as opções quando o dropdown estiver aberto */\n                .dropdown.open .dropdown-options {\n                    display: block;\n                }\n            \n                /* Estilo de cada opção dentro do dropdown */\n                .dropdown-option {\n                    padding: 6px 10px;\n                    cursor: pointer;\n                }\n            \n                /* Hover para opções */\n                .dropdown-option:hover {\n                    background-color: #004085;\n                }\n                /* Efeito de hover do dropdown */\n                .custom-dropdown:hover .dropdown-options {\n                    display: block;\n                }\n            </style>\n\n            <ha-card class="card">\n                <div class="header">\n                    <button class="prev">⬅</button>\n                    <div class="custom-dropdown">\n                        <div class="dropdown-selected">\n                            <span>${new Date(2025,this.currentMonth,1).toLocaleString("default",{month:"long"})}</span>\n                            <div class="dropdown-arrow">▼</div>\n                        </div>\n                        <div class="dropdown-options">\n                            ${[...Array(12).keys()].map((t=>`\n                                <div class="dropdown-option" data-value="${t}">\n                                    ${new Date(2025,t,1).toLocaleString("default",{month:"long"})}\n                                </div>\n                            `)).join("")}\n                        </div>\n                    </div>\n                    <button class="next">➡</button>\n                </div>\n                <div class="schedule-list">\n                    <div class="section">\n                        <h3>Interval between sprinkles (days)</h3>\n                        <input type="number" value="${n.interval_days}" \n                            oninput="this.getRootNode().host.updateIntervalDays(event)">\n                    </div>\n                    <div class="section">\n                        <h3>Scheduled times</h3>\n                        ${n.hours.map(((t,n)=>` \n                            <div>\n                                <input type="time" value="${t}" \n                                    oninput="this.getRootNode().host.updateTimeSlot(${n}, event)">\n                                <button class="btn btn-danger" onclick="this.getRootNode().host.removeTimeSlot(${n})"><span>❌</span></button>\n                            </div>\n                        `)).join("")}\n                        <button class="btn btn-add-time" onclick="this.getRootNode().host.addTimeSlot()"><span>➕</span> Add Time</button>\n                    </div>\n                    <div class="section">\n                        <h3>Sprinkle time per station (minutes)</h3>\n                        ${Object.entries(n.stations).map((([t,n])=>` \n                            <div>\n                                <span>${t.replace("_minutes","").replace("station_","Station ")}</span>\n                                <input type="number" value="${n}" \n                                    oninput="this.getRootNode().host.updateStationTime('${t}', event)">\n                            </div>\n                        `)).join("")}\n                    </div>\n                </div>\n                <div class="buttons">\n                    <button class="btn" onclick="this.getRootNode().host.saveSchedule()">💾 Save</button>\n                </div>\n            </ha-card>\n        `;const e=this.shadowRoot.querySelector(".prev"),o=this.shadowRoot.querySelector(".next");e.replaceWith(e.cloneNode(!0)),o.replaceWith(o.cloneNode(!0)),this.shadowRoot.querySelector(".prev").addEventListener("click",(()=>this.changeMonth(-1))),this.shadowRoot.querySelector(".next").addEventListener("click",(()=>this.changeMonth(1)));const s=document.querySelector("home-assistant");let a=[];setTimeout((()=>{a=this.findAllElementsRecursively(s,"solem-schedule-card"),a.forEach((n=>{if(n.shadowRoot){const e=n.shadowRoot.querySelector(".custom-dropdown");e&&new t(e)}}))}),100),document.addEventListener("click",(t=>{const n=t.composedPath().find((t=>"solem-schedule-card"===t.tagName?.toLowerCase()));if(n&&n.shadowRoot){const t=n.shadowRoot.querySelector(".custom-dropdown");t&&t.click()}}))}}customElements.define("solem-schedule-card",n)})();